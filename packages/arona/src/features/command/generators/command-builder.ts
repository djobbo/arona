import { Project } from "ts-morph"

const project = new Project()
const file = project.createSourceFile(
  "src/features/command/command-builder.ts",
  "",
  {
    overwrite: true,
  },
)

const optionTypes = (
  [
    "String",
    "Integer",
    "Boolean",
    "User",
    "Channel",
    "Role",
    "Mentionable",
    "Number",
    "Attachment",
  ] as const
).map((type) => {
  const optionClass = `SlashCommand${type}Option`
  const method = `get${type}`

  return {
    type,
    optionClass,
    method,
  }
})

file.addStatements((writer) => {
  writer.writeLine(
    `// This file is generated by \`src/features/command/morph/command-builder.ts\`. Do not edit it manually.`,
  )
  writer.writeLine(``)
  writer.writeLine(
    `import { ApplicationCommandOptionType, SlashCommandBuilder as DJSSlashCommandBuilder  } from "discord.js"`,
  )
  writer.writeLine(
    `import { 
      ${optionTypes.map(({ optionClass }) => optionClass).join(", ")}
    } from "discord.js"`,
  )
  writer.writeLine(
    `import type { ChatInputCommandInteraction} from "discord.js"`,
  )
  writer.writeLine(``)
})

file.addClass({
  name: "SlashCommandBuilder",
  extends: "DJSSlashCommandBuilder",
  isExported: true,
  typeParameters: [{ name: "Params", default: "{}" }],
  properties: [
    {
      name: "params",
      type: "{ name: string; type: ApplicationCommandOptionType }[]",
      initializer: "[]",
    },
  ],
  methods: optionTypes
    .map(({ type, method, optionClass }) => {
      return [
        {
          name: `addTyped${type}Option`,
          isGeneric: true,
          typeParameters: [{ name: "Name", constraint: "string" }],
          parameters: [
            { name: "name", type: "Name" },
            {
              name: "...[options, ...args]",
              type: `Parameters<DJSSlashCommandBuilder["add${type}Option"]>`,
            },
          ],
          returnType: `
        SlashCommandBuilder<
          Params & {
            [K in Name]: ReturnType<
              ChatInputCommandInteraction["options"]["${method}"]
            >
          }
        >
      `,
          statements: `
        const typeSafeOptions =
          options instanceof ${optionClass}
            ? options.setName(name)
            : options(new ${optionClass}()).setName(name)
        
        super.add${type}Option(typeSafeOptions, ...args)
        this.params.push({ name, type: ApplicationCommandOptionType.${type} })
        return this
      `,
        },
        {
          name: `add${type}Option`,
          parameters: [
            {
              name: "...args",
              type: `Parameters<DJSSlashCommandBuilder["add${type}Option"]>`,
            },
          ],
          statements: `
        super.add${type}Option(...args);
        return this;
      `,
          docs: [
            {
              tags: [
                {
                  tagName: "depreacted",
                  text: `Use \`addTyped${type}Option\` instead`,
                },
              ],
            },
          ],
        },
      ]
    })
    .flat(),
})

file.addInterface({
  name: "SlashCommandInteraction",
  isExported: true,
  typeParameters: [{ name: "Params", default: "{}" }],
  extends: ["ChatInputCommandInteraction"],
  properties: [
    {
      name: "params",
      type: "Params",
    },
  ],
})

file.addFunction({
  name: "getTypedInteraction",
  isExported: true,
  typeParameters: [{ name: "Params", default: "{}" }],
  parameters: [
    {
      name: "command",
      type: "SlashCommandBuilder<Params>",
    },
    {
      name: "interaction",
      type: "ChatInputCommandInteraction",
    },
  ],
  returnType: "SlashCommandInteraction<Params>",
  statements: `
    const params = command.params.reduce(
      (acc, { name, type }) => {
        let value = null;
        switch (type) {
          ${optionTypes
            .map(({ type, method }) => {
              return `case ApplicationCommandOptionType.${type}:
                  value = interaction.options.${method}(name)
                  break`
            })
            .join("\n")}
          default:
            value = interaction.options.get(name)?.value;
            break;
        }
        acc[name] = value
        return acc
      },
      {} as Record<string, unknown>,
    )
  
    ;(interaction as SlashCommandInteraction).params = params
    return interaction as SlashCommandInteraction<Params>
  `,
})

file.saveSync()
