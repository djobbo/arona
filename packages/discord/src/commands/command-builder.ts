// This file is generated by `src/commands/generators/command-builder.ts`. Do not edit it manually.

import {
	ApplicationCommandOptionType,
	SlashCommandBuilder as DJSSlashCommandBuilder,
} from "discord.js"
import {
	SlashCommandAttachmentOption as DJSSlashCommandAttachmentOption,
	SlashCommandBooleanOption as DJSSlashCommandBooleanOption,
	SlashCommandChannelOption as DJSSlashCommandChannelOption,
	SlashCommandIntegerOption as DJSSlashCommandIntegerOption,
	SlashCommandMentionableOption as DJSSlashCommandMentionableOption,
	SlashCommandNumberOption as DJSSlashCommandNumberOption,
	SlashCommandRoleOption as DJSSlashCommandRoleOption,
	SlashCommandStringOption as DJSSlashCommandStringOption,
	SlashCommandUserOption as DJSSlashCommandUserOption,
} from "discord.js"
import type { ChatInputCommandInteraction } from "discord.js"

export class SlashCommandStringOption<
	Name extends string = never,
	Required extends boolean = false,
> extends DJSSlashCommandStringOption {
	// @ts-expect-error - Type inference issues with discord.js
	setName<N extends string>(name: N) {
		return super.setName(name) as SlashCommandStringOption<N, Required>
	}

	// @ts-expect-error - Type inference issues with discord.js
	setRequired<Req extends boolean>(required: Req) {
		return super.setRequired(required) as SlashCommandStringOption<Name, Req>
	}
}

export class SlashCommandIntegerOption<
	Name extends string = never,
	Required extends boolean = false,
> extends DJSSlashCommandIntegerOption {
	// @ts-expect-error - Type inference issues with discord.js
	setName<N extends string>(name: N) {
		return super.setName(name) as SlashCommandIntegerOption<N, Required>
	}

	// @ts-expect-error - Type inference issues with discord.js
	setRequired<Req extends boolean>(required: Req) {
		return super.setRequired(required) as SlashCommandIntegerOption<Name, Req>
	}
}

export class SlashCommandBooleanOption<
	Name extends string = never,
	Required extends boolean = false,
> extends DJSSlashCommandBooleanOption {
	// @ts-expect-error - Type inference issues with discord.js
	setName<N extends string>(name: N) {
		return super.setName(name) as SlashCommandBooleanOption<N, Required>
	}

	// @ts-expect-error - Type inference issues with discord.js
	setRequired<Req extends boolean>(required: Req) {
		return super.setRequired(required) as SlashCommandBooleanOption<Name, Req>
	}
}

export class SlashCommandUserOption<
	Name extends string = never,
	Required extends boolean = false,
> extends DJSSlashCommandUserOption {
	// @ts-expect-error - Type inference issues with discord.js
	setName<N extends string>(name: N) {
		return super.setName(name) as SlashCommandUserOption<N, Required>
	}

	// @ts-expect-error - Type inference issues with discord.js
	setRequired<Req extends boolean>(required: Req) {
		return super.setRequired(required) as SlashCommandUserOption<Name, Req>
	}
}

export class SlashCommandChannelOption<
	Name extends string = never,
	Required extends boolean = false,
> extends DJSSlashCommandChannelOption {
	// @ts-expect-error - Type inference issues with discord.js
	setName<N extends string>(name: N) {
		return super.setName(name) as SlashCommandChannelOption<N, Required>
	}

	// @ts-expect-error - Type inference issues with discord.js
	setRequired<Req extends boolean>(required: Req) {
		return super.setRequired(required) as SlashCommandChannelOption<Name, Req>
	}
}

export class SlashCommandRoleOption<
	Name extends string = never,
	Required extends boolean = false,
> extends DJSSlashCommandRoleOption {
	// @ts-expect-error - Type inference issues with discord.js
	setName<N extends string>(name: N) {
		return super.setName(name) as SlashCommandRoleOption<N, Required>
	}

	// @ts-expect-error - Type inference issues with discord.js
	setRequired<Req extends boolean>(required: Req) {
		return super.setRequired(required) as SlashCommandRoleOption<Name, Req>
	}
}

export class SlashCommandMentionableOption<
	Name extends string = never,
	Required extends boolean = false,
> extends DJSSlashCommandMentionableOption {
	// @ts-expect-error - Type inference issues with discord.js
	setName<N extends string>(name: N) {
		return super.setName(name) as SlashCommandMentionableOption<N, Required>
	}

	// @ts-expect-error - Type inference issues with discord.js
	setRequired<Req extends boolean>(required: Req) {
		return super.setRequired(required) as SlashCommandMentionableOption<
			Name,
			Req
		>
	}
}

export class SlashCommandNumberOption<
	Name extends string = never,
	Required extends boolean = false,
> extends DJSSlashCommandNumberOption {
	// @ts-expect-error - Type inference issues with discord.js
	setName<N extends string>(name: N) {
		return super.setName(name) as SlashCommandNumberOption<N, Required>
	}

	// @ts-expect-error - Type inference issues with discord.js
	setRequired<Req extends boolean>(required: Req) {
		return super.setRequired(required) as SlashCommandNumberOption<Name, Req>
	}
}

export class SlashCommandAttachmentOption<
	Name extends string = never,
	Required extends boolean = false,
> extends DJSSlashCommandAttachmentOption {
	// @ts-expect-error - Type inference issues with discord.js
	setName<N extends string>(name: N) {
		return super.setName(name) as SlashCommandAttachmentOption<N, Required>
	}

	// @ts-expect-error - Type inference issues with discord.js
	setRequired<Req extends boolean>(required: Req) {
		return super.setRequired(required) as SlashCommandAttachmentOption<
			Name,
			Req
		>
	}
}

export class SlashCommandBuilder<Params = {}> extends DJSSlashCommandBuilder {
	params: { name: string; type: ApplicationCommandOptionType }[] = []

	addTypedStringOption<
		Name extends string,
		Required extends boolean,
		OptionType extends Exclude<
			ReturnType<ChatInputCommandInteraction["options"]["getString"]>,
			null | undefined
		>,
	>(
		options:
			| SlashCommandStringOption<Name, Required>
			| ((
					option: SlashCommandStringOption,
			  ) => SlashCommandStringOption<Name, Required>),
	): SlashCommandBuilder<
		Params &
			(Required extends true
				? {
						[K in Name]: OptionType
					}
				: {
						[K in Name]?: OptionType
					})
	> {
		const typeSafeOption =
			options instanceof DJSSlashCommandStringOption
				? options
				: options(new SlashCommandStringOption<Name, Required>())

		super.addStringOption(typeSafeOption)
		this.params.push({
			name: typeSafeOption.name,
			type: ApplicationCommandOptionType.String,
		})
		return this
	}

	/** @depreacted Use `addTypedStringOption` instead */
	addStringOption(
		...args: Parameters<DJSSlashCommandBuilder["addStringOption"]>
	) {
		super.addStringOption(...args)
		return this
	}

	addTypedIntegerOption<
		Name extends string,
		Required extends boolean,
		OptionType extends Exclude<
			ReturnType<ChatInputCommandInteraction["options"]["getInteger"]>,
			null | undefined
		>,
	>(
		options:
			| SlashCommandIntegerOption<Name, Required>
			| ((
					option: SlashCommandIntegerOption,
			  ) => SlashCommandIntegerOption<Name, Required>),
	): SlashCommandBuilder<
		Params &
			(Required extends true
				? {
						[K in Name]: OptionType
					}
				: {
						[K in Name]?: OptionType
					})
	> {
		const typeSafeOption =
			options instanceof DJSSlashCommandIntegerOption
				? options
				: options(new SlashCommandIntegerOption<Name, Required>())

		super.addIntegerOption(typeSafeOption)
		this.params.push({
			name: typeSafeOption.name,
			type: ApplicationCommandOptionType.Integer,
		})
		return this
	}

	/** @depreacted Use `addTypedIntegerOption` instead */
	addIntegerOption(
		...args: Parameters<DJSSlashCommandBuilder["addIntegerOption"]>
	) {
		super.addIntegerOption(...args)
		return this
	}

	addTypedBooleanOption<
		Name extends string,
		Required extends boolean,
		OptionType extends Exclude<
			ReturnType<ChatInputCommandInteraction["options"]["getBoolean"]>,
			null | undefined
		>,
	>(
		options:
			| SlashCommandBooleanOption<Name, Required>
			| ((
					option: SlashCommandBooleanOption,
			  ) => SlashCommandBooleanOption<Name, Required>),
	): SlashCommandBuilder<
		Params &
			(Required extends true
				? {
						[K in Name]: OptionType
					}
				: {
						[K in Name]?: OptionType
					})
	> {
		const typeSafeOption =
			options instanceof DJSSlashCommandBooleanOption
				? options
				: options(new SlashCommandBooleanOption<Name, Required>())

		super.addBooleanOption(typeSafeOption)
		this.params.push({
			name: typeSafeOption.name,
			type: ApplicationCommandOptionType.Boolean,
		})
		return this
	}

	/** @depreacted Use `addTypedBooleanOption` instead */
	addBooleanOption(
		...args: Parameters<DJSSlashCommandBuilder["addBooleanOption"]>
	) {
		super.addBooleanOption(...args)
		return this
	}

	addTypedUserOption<
		Name extends string,
		Required extends boolean,
		OptionType extends Exclude<
			ReturnType<ChatInputCommandInteraction["options"]["getUser"]>,
			null | undefined
		>,
	>(
		options:
			| SlashCommandUserOption<Name, Required>
			| ((
					option: SlashCommandUserOption,
			  ) => SlashCommandUserOption<Name, Required>),
	): SlashCommandBuilder<
		Params &
			(Required extends true
				? {
						[K in Name]: OptionType
					}
				: {
						[K in Name]?: OptionType
					})
	> {
		const typeSafeOption =
			options instanceof DJSSlashCommandUserOption
				? options
				: options(new SlashCommandUserOption<Name, Required>())

		super.addUserOption(typeSafeOption)
		this.params.push({
			name: typeSafeOption.name,
			type: ApplicationCommandOptionType.User,
		})
		return this
	}

	/** @depreacted Use `addTypedUserOption` instead */
	addUserOption(...args: Parameters<DJSSlashCommandBuilder["addUserOption"]>) {
		super.addUserOption(...args)
		return this
	}

	addTypedChannelOption<
		Name extends string,
		Required extends boolean,
		OptionType extends Exclude<
			ReturnType<ChatInputCommandInteraction["options"]["getChannel"]>,
			null | undefined
		>,
	>(
		options:
			| SlashCommandChannelOption<Name, Required>
			| ((
					option: SlashCommandChannelOption,
			  ) => SlashCommandChannelOption<Name, Required>),
	): SlashCommandBuilder<
		Params &
			(Required extends true
				? {
						[K in Name]: OptionType
					}
				: {
						[K in Name]?: OptionType
					})
	> {
		const typeSafeOption =
			options instanceof DJSSlashCommandChannelOption
				? options
				: options(new SlashCommandChannelOption<Name, Required>())

		super.addChannelOption(typeSafeOption)
		this.params.push({
			name: typeSafeOption.name,
			type: ApplicationCommandOptionType.Channel,
		})
		return this
	}

	/** @depreacted Use `addTypedChannelOption` instead */
	addChannelOption(
		...args: Parameters<DJSSlashCommandBuilder["addChannelOption"]>
	) {
		super.addChannelOption(...args)
		return this
	}

	addTypedRoleOption<
		Name extends string,
		Required extends boolean,
		OptionType extends Exclude<
			ReturnType<ChatInputCommandInteraction["options"]["getRole"]>,
			null | undefined
		>,
	>(
		options:
			| SlashCommandRoleOption<Name, Required>
			| ((
					option: SlashCommandRoleOption,
			  ) => SlashCommandRoleOption<Name, Required>),
	): SlashCommandBuilder<
		Params &
			(Required extends true
				? {
						[K in Name]: OptionType
					}
				: {
						[K in Name]?: OptionType
					})
	> {
		const typeSafeOption =
			options instanceof DJSSlashCommandRoleOption
				? options
				: options(new SlashCommandRoleOption<Name, Required>())

		super.addRoleOption(typeSafeOption)
		this.params.push({
			name: typeSafeOption.name,
			type: ApplicationCommandOptionType.Role,
		})
		return this
	}

	/** @depreacted Use `addTypedRoleOption` instead */
	addRoleOption(...args: Parameters<DJSSlashCommandBuilder["addRoleOption"]>) {
		super.addRoleOption(...args)
		return this
	}

	addTypedMentionableOption<
		Name extends string,
		Required extends boolean,
		OptionType extends Exclude<
			ReturnType<ChatInputCommandInteraction["options"]["getMentionable"]>,
			null | undefined
		>,
	>(
		options:
			| SlashCommandMentionableOption<Name, Required>
			| ((
					option: SlashCommandMentionableOption,
			  ) => SlashCommandMentionableOption<Name, Required>),
	): SlashCommandBuilder<
		Params &
			(Required extends true
				? {
						[K in Name]: OptionType
					}
				: {
						[K in Name]?: OptionType
					})
	> {
		const typeSafeOption =
			options instanceof DJSSlashCommandMentionableOption
				? options
				: options(new SlashCommandMentionableOption<Name, Required>())

		super.addMentionableOption(typeSafeOption)
		this.params.push({
			name: typeSafeOption.name,
			type: ApplicationCommandOptionType.Mentionable,
		})
		return this
	}

	/** @depreacted Use `addTypedMentionableOption` instead */
	addMentionableOption(
		...args: Parameters<DJSSlashCommandBuilder["addMentionableOption"]>
	) {
		super.addMentionableOption(...args)
		return this
	}

	addTypedNumberOption<
		Name extends string,
		Required extends boolean,
		OptionType extends Exclude<
			ReturnType<ChatInputCommandInteraction["options"]["getNumber"]>,
			null | undefined
		>,
	>(
		options:
			| SlashCommandNumberOption<Name, Required>
			| ((
					option: SlashCommandNumberOption,
			  ) => SlashCommandNumberOption<Name, Required>),
	): SlashCommandBuilder<
		Params &
			(Required extends true
				? {
						[K in Name]: OptionType
					}
				: {
						[K in Name]?: OptionType
					})
	> {
		const typeSafeOption =
			options instanceof DJSSlashCommandNumberOption
				? options
				: options(new SlashCommandNumberOption<Name, Required>())

		super.addNumberOption(typeSafeOption)
		this.params.push({
			name: typeSafeOption.name,
			type: ApplicationCommandOptionType.Number,
		})
		return this
	}

	/** @depreacted Use `addTypedNumberOption` instead */
	addNumberOption(
		...args: Parameters<DJSSlashCommandBuilder["addNumberOption"]>
	) {
		super.addNumberOption(...args)
		return this
	}

	addTypedAttachmentOption<
		Name extends string,
		Required extends boolean,
		OptionType extends Exclude<
			ReturnType<ChatInputCommandInteraction["options"]["getAttachment"]>,
			null | undefined
		>,
	>(
		options:
			| SlashCommandAttachmentOption<Name, Required>
			| ((
					option: SlashCommandAttachmentOption,
			  ) => SlashCommandAttachmentOption<Name, Required>),
	): SlashCommandBuilder<
		Params &
			(Required extends true
				? {
						[K in Name]: OptionType
					}
				: {
						[K in Name]?: OptionType
					})
	> {
		const typeSafeOption =
			options instanceof DJSSlashCommandAttachmentOption
				? options
				: options(new SlashCommandAttachmentOption<Name, Required>())

		super.addAttachmentOption(typeSafeOption)
		this.params.push({
			name: typeSafeOption.name,
			type: ApplicationCommandOptionType.Attachment,
		})
		return this
	}

	/** @depreacted Use `addTypedAttachmentOption` instead */
	addAttachmentOption(
		...args: Parameters<DJSSlashCommandBuilder["addAttachmentOption"]>
	) {
		super.addAttachmentOption(...args)
		return this
	}
}

export interface SlashCommandInteraction<Params = {}>
	extends ChatInputCommandInteraction {
	params: Params
}

export function getTypedInteraction<Params = {}>(
	command: SlashCommandBuilder<Params>,
	interaction: ChatInputCommandInteraction,
): SlashCommandInteraction<Params> {
	const params = command.params.reduce(
		(acc, { name, type }) => {
			let value = null
			switch (type) {
				case ApplicationCommandOptionType.String:
					value = interaction.options.getString(name)
					break
				case ApplicationCommandOptionType.Integer:
					value = interaction.options.getInteger(name)
					break
				case ApplicationCommandOptionType.Boolean:
					value = interaction.options.getBoolean(name)
					break
				case ApplicationCommandOptionType.User:
					value = interaction.options.getUser(name)
					break
				case ApplicationCommandOptionType.Channel:
					value = interaction.options.getChannel(name)
					break
				case ApplicationCommandOptionType.Role:
					value = interaction.options.getRole(name)
					break
				case ApplicationCommandOptionType.Mentionable:
					value = interaction.options.getMentionable(name)
					break
				case ApplicationCommandOptionType.Number:
					value = interaction.options.getNumber(name)
					break
				case ApplicationCommandOptionType.Attachment:
					value = interaction.options.getAttachment(name)
					break
				default:
					value = interaction.options.get(name)?.value
					break
			}
			acc[name] = value
			return acc
		},
		{} as Record<string, unknown>,
	)
	;(interaction as SlashCommandInteraction).params = params
	return interaction as SlashCommandInteraction<Params>
}
